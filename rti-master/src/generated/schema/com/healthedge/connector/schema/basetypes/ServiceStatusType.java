//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.11.28 at 09:19:38 AM EST 
//


package com.healthedge.connector.schema.basetypes;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ServiceStatusType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ServiceStatusType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Match Found"/>
 *     &lt;enumeration value="No Match Found"/>
 *     &lt;enumeration value="Multiple Match Found"/>
 *     &lt;enumeration value="No Member Found"/>
 *     &lt;enumeration value="SUCCESS"/>
 *     &lt;enumeration value="FAILURE"/>
 *     &lt;enumeration value="ERROR"/>
 *     &lt;enumeration value="Not Processed"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ServiceStatusType")
@XmlEnum
public enum ServiceStatusType {

    @XmlEnumValue("Match Found")
    MATCH_FOUND("Match Found"),
    @XmlEnumValue("No Match Found")
    NO_MATCH_FOUND("No Match Found"),
    @XmlEnumValue("Multiple Match Found")
    MULTIPLE_MATCH_FOUND("Multiple Match Found"),
    @XmlEnumValue("No Member Found")
    NO_MEMBER_FOUND("No Member Found"),
    SUCCESS("SUCCESS"),
    FAILURE("FAILURE"),
    ERROR("ERROR"),
    @XmlEnumValue("Not Processed")
    NOT_PROCESSED("Not Processed");
    private final String value;

    ServiceStatusType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ServiceStatusType fromValue(String v) {
        for (ServiceStatusType c: ServiceStatusType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
